//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by ros2cs.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

#nullable enable

namespace Rosidl.Messages.Sensor
{
    /// <summary>
    /// This message defines meta information for a camera. It should be in a
    /// camera namespace on topic "camera_info" and accompanied by up to five
    /// image topics named:
    /// 
    /// image_raw - raw data from the camera driver, possibly Bayer encoded
    /// image            - monochrome, distorted
    /// image_color      - color, distorted
    /// image_rect       - monochrome, rectified
    /// image_rect_color - color, rectified
    /// 
    /// The image_pipeline contains packages (image_proc, stereo_image_proc)
    /// for producing the four processed image topics from image_raw and
    /// camera_info. The meaning of the camera parameters are described in
    /// detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
    /// 
    /// The image_geometry package provides a user-friendly interface to
    /// common operations using this meta information. If you want to, e.g.,
    /// project a 3d point into image coordinates, we strongly recommend
    /// using image_geometry.
    /// 
    /// If the camera is uncalibrated, the matrices D, K, R, P should be left
    /// zeroed out. In particular, clients may assume that K[0] == 0.0
    /// indicates an uncalibrated camera.
    /// </summary>
    /// <remarks>
    /// Message interface definition for <c>sensor_msgs/msg/CameraInfo</c>.
    /// </remarks>
    [global::Rosidl.Runtime.TypeSupportAttribute("sensor_msgs/msg/CameraInfo")]
    public unsafe partial class CameraInfo : global::Rosidl.Runtime.IMessage
    {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static string TypeSupportName => "sensor_msgs/msg/CameraInfo";
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static global::Rosidl.Runtime.TypeSupportHandle GetTypeSupportHandle()
        {
            return new global::Rosidl.Runtime.TypeSupportHandle(_PInvoke(), global::Rosidl.Runtime.HandleType.Message);
            
            [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
            [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_typesupport_c", EntryPoint = "rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__CameraInfo")]
            static extern nint _PInvoke();
        }
        
        /// <summary>
        /// Create a new instance of <see cref="CameraInfo"/> with fields initialized to specified values.
        /// </summary>
        /// <param name='header'>
        /// Header timestamp should be acquisition time of image
        /// <para>(originally defined as: <c><![CDATA[std_msgs/msg/Header header]]></c>)</para>
        /// </param>
        /// <param name='height'>
        /// The image dimensions with which the camera was calibrated.
        /// Normally this will be the full camera resolution in pixels.
        /// <para>(originally defined as: <c><![CDATA[uint32 height]]></c>)</para>
        /// </param>
        /// <param name='width'>
        /// Originally defined as: <c><![CDATA[uint32 width]]></c>
        /// </param>
        /// <param name='distortionModel'>
        /// The distortion model used. Supported models are listed in
        /// sensor_msgs/distortion_models.hpp. For most cameras, "plumb_bob" - a
        /// simple model of radial and tangential distortion - is sufficent.
        /// <para>(originally defined as: <c><![CDATA[string distortion_model]]></c>)</para>
        /// </param>
        /// <param name='d'>
        /// The distortion parameters, size depending on the distortion model.
        /// For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
        /// <para>(originally defined as: <c><![CDATA[float64[] d]]></c>)</para>
        /// </param>
        /// <param name='k'>
        /// 3x3 row-major matrix
        /// <para>(originally defined as: <c><![CDATA[float64[9] k]]></c>)</para>
        /// </param>
        /// <param name='r'>
        /// 3x3 row-major matrix
        /// <para>(originally defined as: <c><![CDATA[float64[9] r]]></c>)</para>
        /// </param>
        /// <param name='p'>
        /// 3x4 row-major matrix
        /// <para>(originally defined as: <c><![CDATA[float64[12] p]]></c>)</para>
        /// </param>
        /// <param name='binningX'>
        /// Binning refers here to any camera setting which combines rectangular
        /// neighborhoods of pixels into larger "super-pixels." It reduces the
        /// resolution of the output image to
        /// (width / binning_x) x (height / binning_y).
        /// The default values binning_x = binning_y = 0 is considered the same
        /// as binning_x = binning_y = 1 (no subsampling).
        /// <para>(originally defined as: <c><![CDATA[uint32 binning_x]]></c>)</para>
        /// </param>
        /// <param name='binningY'>
        /// Originally defined as: <c><![CDATA[uint32 binning_y]]></c>
        /// </param>
        /// <param name='roi'>
        /// Region of interest (subwindow of full camera resolution), given in
        /// full resolution (unbinned) image coordinates. A particular ROI
        /// always denotes the same window of pixels on the camera sensor,
        /// regardless of binning settings.
        /// The default setting of roi (all values 0) is considered the same as
        /// full resolution (roi.width = width, roi.height = height).
        /// <para>(originally defined as: <c><![CDATA[sensor_msgs/msg/RegionOfInterest roi]]></c>)</para>
        /// </param>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public CameraInfo(
            global::Rosidl.Messages.Std.Header? @header = null,
            uint @height = 0,
            uint @width = 0,
            string @distortionModel = "",
            double[]? @d = null,
            double[]? @k = null,
            double[]? @r = null,
            double[]? @p = null,
            uint @binningX = 0,
            uint @binningY = 0,
            global::Rosidl.Messages.Sensor.RegionOfInterest? @roi = null
        )
        {
            Header = @header ?? new global::Rosidl.Messages.Std.Header();
            Height = @height;
            Width = @width;
            DistortionModel = @distortionModel;
            D = @d ?? global::System.Array.Empty<double>();
        
            if (@k != null)
            {
                K = @k;
            }
            else
            {
                K = new double[9] { 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d };
            }
        
            if (@r != null)
            {
                R = @r;
            }
            else
            {
                R = new double[9] { 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d };
            }
        
            if (@p != null)
            {
                P = @p;
            }
            else
            {
                P = new double[12] { 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d, 0d };
            }
        
            BinningX = @binningX;
            BinningY = @binningY;
            Roi = @roi ?? new global::Rosidl.Messages.Sensor.RegionOfInterest();
        }
        
        
        /// <summary>
        /// Create a new instance of <see cref="CameraInfo"/>, and copy its data from the specified <see cref="Priv"/> structure.
        /// </summary>
        /// <param name="priv">The <see cref="Priv"/> structure to be copied from.</param>
        /// <param name="textEncoding">Text encoding of the strings in the <see cref="Priv"/> structure and its containing structures, if any.</param>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public CameraInfo(in Priv priv, global::System.Text.Encoding textEncoding)
        {
            this.Header = new global::Rosidl.Messages.Std.Header(in priv.Header, textEncoding);
            this.Height = priv.Height;
            this.Width = priv.Width;
            this.DistortionModel = global::Rosidl.Runtime.Interop.StringMarshal.CreatePooledString(priv.DistortionModel.AsSpan(), textEncoding);
            this.D = priv.D.AsSpan().ToArray();
            this.K = priv.K.ToArray();
            this.R = priv.R.ToArray();
            this.P = priv.P.ToArray();
            this.BinningX = priv.BinningX;
            this.BinningY = priv.BinningY;
            this.Roi = new global::Rosidl.Messages.Sensor.RegionOfInterest(in priv.Roi, textEncoding);
        }
        
        
        /// <summary>
        /// Header timestamp should be acquisition time of image
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[std_msgs/msg/Header header]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public global::Rosidl.Messages.Std.Header Header { get; set; }
        
        /// <summary>
        /// The image dimensions with which the camera was calibrated.
        /// Normally this will be the full camera resolution in pixels.
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[uint32 height]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public uint Height { get; set; }
        
        /// <summary>
        /// Originally defined as: <c><![CDATA[uint32 width]]></c>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public uint Width { get; set; }
        
        /// <summary>
        /// The distortion model used. Supported models are listed in
        /// sensor_msgs/distortion_models.hpp. For most cameras, "plumb_bob" - a
        /// simple model of radial and tangential distortion - is sufficent.
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[string distortion_model]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public string DistortionModel { get; set; }
        
        /// <summary>
        /// The distortion parameters, size depending on the distortion model.
        /// For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[float64[] d]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public double[] D { get; set; }
        
        private double[] __backingField__K;
        
        /// <summary>
        /// 3x3 row-major matrix
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[float64[9] k]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public double[] K
        {
            get
            {
                return __backingField__K;
            }
            [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(__backingField__K))]
            set
            {
                __backingField__K = value.Length == 9 ? value : throw new global::System.ArgumentException("Size of the array 'K' must be 9.");
            }
        }
        
        private double[] __backingField__R;
        
        /// <summary>
        /// 3x3 row-major matrix
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[float64[9] r]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public double[] R
        {
            get
            {
                return __backingField__R;
            }
            [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(__backingField__R))]
            set
            {
                __backingField__R = value.Length == 9 ? value : throw new global::System.ArgumentException("Size of the array 'R' must be 9.");
            }
        }
        
        private double[] __backingField__P;
        
        /// <summary>
        /// 3x4 row-major matrix
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[float64[12] p]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public double[] P
        {
            get
            {
                return __backingField__P;
            }
            [global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof(__backingField__P))]
            set
            {
                __backingField__P = value.Length == 12 ? value : throw new global::System.ArgumentException("Size of the array 'P' must be 12.");
            }
        }
        
        /// <summary>
        /// Binning refers here to any camera setting which combines rectangular
        /// neighborhoods of pixels into larger "super-pixels." It reduces the
        /// resolution of the output image to
        /// (width / binning_x) x (height / binning_y).
        /// The default values binning_x = binning_y = 0 is considered the same
        /// as binning_x = binning_y = 1 (no subsampling).
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[uint32 binning_x]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public uint BinningX { get; set; }
        
        /// <summary>
        /// Originally defined as: <c><![CDATA[uint32 binning_y]]></c>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public uint BinningY { get; set; }
        
        /// <summary>
        /// Region of interest (subwindow of full camera resolution), given in
        /// full resolution (unbinned) image coordinates. A particular ROI
        /// always denotes the same window of pixels on the camera sensor,
        /// regardless of binning settings.
        /// The default setting of roi (all values 0) is considered the same as
        /// full resolution (roi.width = width, roi.height = height).
        /// </summary>
        /// <remarks>
        /// Originally defined as: <c><![CDATA[sensor_msgs/msg/RegionOfInterest roi]]></c>
        /// </remarks>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public global::Rosidl.Messages.Sensor.RegionOfInterest Roi { get; set; }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public void WriteTo(nint data, global::System.Text.Encoding textEncoding)
        {
            WriteTo(ref global::System.Runtime.CompilerServices.Unsafe.AsRef<Priv>(data.ToPointer()), textEncoding);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public void WriteTo(ref Priv priv, global::System.Text.Encoding textEncoding)
        {
            this.Header.WriteTo(ref priv.Header, textEncoding);
            priv.Height = this.Height;
            priv.Width = this.Width;
            priv.DistortionModel.CopyFrom(this.DistortionModel, textEncoding);
            priv.D.CopyFrom(this.D);
            this.K.CopyTo(priv.K);
            this.R.CopyTo(priv.R);
            this.P.CopyTo(priv.P);
            priv.BinningX = this.BinningX;
            priv.BinningY = this.BinningY;
            this.Roi.WriteTo(ref priv.Roi, textEncoding);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static global::Rosidl.Runtime.IMessage CreateFrom(nint data, global::System.Text.Encoding textEncoding)
        {
            return new CameraInfo(in global::System.Runtime.CompilerServices.Unsafe.AsRef<Priv>(data.ToPointer()), textEncoding);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static nint UnsafeCreate()
        {
            return new(Priv.Create());
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static void UnsafeDestroy(nint data)
        {
            Priv.Destroy((Priv*)data);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static bool UnsafeInitialize(nint data)
        {
            return Priv.TryInitialize(out System.Runtime.CompilerServices.Unsafe.AsRef<Priv>(data.ToPointer()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static void UnsafeFinalize(nint data)
        {
            Priv.Finalize(ref System.Runtime.CompilerServices.Unsafe.AsRef<Priv>(data.ToPointer()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static bool UnsafeInitializeSequence(int size, nint data)
        {
            return PrivSequence.TryInitialize(size, out System.Runtime.CompilerServices.Unsafe.AsRef<PrivSequence>(data.ToPointer()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
        public static void UnsafeFinalizeSequence(nint data)
        {
            PrivSequence.Finalize(ref System.Runtime.CompilerServices.Unsafe.AsRef<PrivSequence>(data.ToPointer()));
        }
        
        /// <summary>
        /// This message defines meta information for a camera. It should be in a
        /// camera namespace on topic "camera_info" and accompanied by up to five
        /// image topics named:
        /// 
        /// image_raw - raw data from the camera driver, possibly Bayer encoded
        /// image            - monochrome, distorted
        /// image_color      - color, distorted
        /// image_rect       - monochrome, rectified
        /// image_rect_color - color, rectified
        /// 
        /// The image_pipeline contains packages (image_proc, stereo_image_proc)
        /// for producing the four processed image topics from image_raw and
        /// camera_info. The meaning of the camera parameters are described in
        /// detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
        /// 
        /// The image_geometry package provides a user-friendly interface to
        /// common operations using this meta information. If you want to, e.g.,
        /// project a 3d point into image coordinates, we strongly recommend
        /// using image_geometry.
        /// 
        /// If the camera is uncalibrated, the matrices D, K, R, P should be left
        /// zeroed out. In particular, clients may assume that K[0] == 0.0
        /// indicates an uncalibrated camera.
        /// </summary>
        /// <remarks>
        /// Blittable native structure for <c>sensor_msgs/msg/CameraInfo</c>.
        /// </remarks>
        [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct Priv : global::System.IEquatable<Priv>, global::System.IDisposable
        {
            /// <summary>
            /// Header timestamp should be acquisition time of image
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[std_msgs/msg/Header header]]></c>
            /// </remarks>
            public global::Rosidl.Messages.Std.Header.Priv Header;
            
            /// <summary>
            /// The image dimensions with which the camera was calibrated.
            /// Normally this will be the full camera resolution in pixels.
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[uint32 height]]></c>
            /// </remarks>
            public uint Height;
            
            /// <summary>
            /// Originally defined as: <c><![CDATA[uint32 width]]></c>
            /// </summary>
            public uint Width;
            
            /// <summary>
            /// The distortion model used. Supported models are listed in
            /// sensor_msgs/distortion_models.hpp. For most cameras, "plumb_bob" - a
            /// simple model of radial and tangential distortion - is sufficent.
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[string distortion_model]]></c>
            /// </remarks>
            public global::Rosidl.Runtime.Interop.CString DistortionModel;
            
            /// <summary>
            /// The distortion parameters, size depending on the distortion model.
            /// For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[float64[] d]]></c>
            /// </remarks>
            public global::Rosidl.Runtime.Interop.DoubleSequence D;
            
            private fixed double __K[9];
            
            /// <summary>
            /// 3x3 row-major matrix
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[float64[9] k]]></c>
            /// </remarks>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public global::System.Span<double> K
            {
                get
                {
                    fixed (global::Rosidl.Messages.Sensor.CameraInfo.Priv* __p = &this) return new (__p->__K, 9);
                }
            }
            
            private fixed double __R[9];
            
            /// <summary>
            /// 3x3 row-major matrix
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[float64[9] r]]></c>
            /// </remarks>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public global::System.Span<double> R
            {
                get
                {
                    fixed (global::Rosidl.Messages.Sensor.CameraInfo.Priv* __p = &this) return new (__p->__R, 9);
                }
            }
            
            private fixed double __P[12];
            
            /// <summary>
            /// 3x4 row-major matrix
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[float64[12] p]]></c>
            /// </remarks>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public global::System.Span<double> P
            {
                get
                {
                    fixed (global::Rosidl.Messages.Sensor.CameraInfo.Priv* __p = &this) return new (__p->__P, 12);
                }
            }
            
            /// <summary>
            /// Binning refers here to any camera setting which combines rectangular
            /// neighborhoods of pixels into larger "super-pixels." It reduces the
            /// resolution of the output image to
            /// (width / binning_x) x (height / binning_y).
            /// The default values binning_x = binning_y = 0 is considered the same
            /// as binning_x = binning_y = 1 (no subsampling).
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[uint32 binning_x]]></c>
            /// </remarks>
            public uint BinningX;
            
            /// <summary>
            /// Originally defined as: <c><![CDATA[uint32 binning_y]]></c>
            /// </summary>
            public uint BinningY;
            
            /// <summary>
            /// Region of interest (subwindow of full camera resolution), given in
            /// full resolution (unbinned) image coordinates. A particular ROI
            /// always denotes the same window of pixels on the camera sensor,
            /// regardless of binning settings.
            /// The default setting of roi (all values 0) is considered the same as
            /// full resolution (roi.width = width, roi.height = height).
            /// </summary>
            /// <remarks>
            /// Originally defined as: <c><![CDATA[sensor_msgs/msg/RegionOfInterest roi]]></c>
            /// </remarks>
            public global::Rosidl.Messages.Sensor.RegionOfInterest.Priv Roi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public Priv()
            {
                ThrowIfNonSuccess(TryInitialize(out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public Priv(Priv src)
                : this(in src)
            {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public Priv(in Priv src)
                : this()
            {
                CopyFrom(in src); 
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public Priv(Priv* src)
                : this()
            {
                CopyFrom(src); 
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void Dispose()
            {
                Finalize(ref this);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(Priv src)
            {
                ThrowIfNonSuccess(TryCopy(in src, out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(in Priv src)
            {
                ThrowIfNonSuccess(TryCopy(in src, out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(Priv* src)
            {
                fixed (Priv* pThis = &this)
                {
                    ThrowIfNonSuccess(TryCopy(src, pThis));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool TryCopy(in Priv input, out Priv output)
            {
                fixed (Priv* pInput = &input, pOutput = &output)
                {
                    return TryCopy(pInput, pOutput);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public bool Equals(Priv other)
            {
                return Priv.AreEqual(in other, in this);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public override bool Equals(object? obj) => obj is Priv s ? this.Equals(s) : false;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public override int GetHashCode()
            {
                var __hashCode = new global::System.HashCode();
                __hashCode.Add(this.Header);
                __hashCode.Add(this.Height);
                __hashCode.Add(this.Width);
                __hashCode.Add(this.DistortionModel);
                __hashCode.Add(this.D);
                for (int __i = 0; __i < 9; __i++)
                {
                    __hashCode.Add(this.K[__i]);
                }
                for (int __i = 0; __i < 9; __i++)
                {
                    __hashCode.Add(this.R[__i]);
                }
                for (int __i = 0; __i < 12; __i++)
                {
                    __hashCode.Add(this.P[__i]);
                }
                __hashCode.Add(this.BinningX);
                __hashCode.Add(this.BinningY);
                __hashCode.Add(this.Roi);
            
                return __hashCode.ToHashCode();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool operator ==(Priv lhs, Priv rhs)
            {
                return lhs.Equals(rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool operator !=(Priv lhs, Priv rhs)
            {
                return !(lhs == rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static Priv* Create()
            {
                return _PInvoke();
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__create")]
                static extern Priv* _PInvoke();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void Destroy(Priv* msg)
            {
                _PInvoke(msg);
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__destroy")]
                static extern void _PInvoke(Priv* msg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool TryInitialize(out Priv msg)
            {
                fixed (Priv* pMsg = &msg)
                {
                    return _PInvoke(pMsg);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__init")]
                static extern bool _PInvoke(Priv* msg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void Finalize(ref Priv msg)
            {
                fixed (Priv* pMsg = &msg)
                {
                    _PInvoke(pMsg);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__fini")]
                static extern void _PInvoke(Priv* msg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool AreEqual(in Priv lhs, in Priv rhs)
            {
                fixed (Priv* plhs = &lhs, prhs = &rhs)
                {
                    return _PInvoke(plhs, prhs);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__are_qual")]
                static extern bool _PInvoke(Priv* lhs, Priv* rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool TryCopy(Priv* input, Priv* output)
            {
                return _PInvoke(input, output);
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__copy")]
                static extern bool _PInvoke(Priv* input, Priv* output);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void ThrowIfNonSuccess(bool ret, [global::System.Runtime.CompilerServices.CallerMemberNameAttribute]
            string caller = "")
            {
                if (!ret)
                {
                    throw new global::Rosidl.Runtime.RosidlException($"An error occurred when calling 'global::Rosidl.Messages.Sensor.CameraInfo.Priv.{caller}'.");
                }
            }
        }
        
        /// <summary>
        /// This message defines meta information for a camera. It should be in a
        /// camera namespace on topic "camera_info" and accompanied by up to five
        /// image topics named:
        /// 
        /// image_raw - raw data from the camera driver, possibly Bayer encoded
        /// image            - monochrome, distorted
        /// image_color      - color, distorted
        /// image_rect       - monochrome, rectified
        /// image_rect_color - color, rectified
        /// 
        /// The image_pipeline contains packages (image_proc, stereo_image_proc)
        /// for producing the four processed image topics from image_raw and
        /// camera_info. The meaning of the camera parameters are described in
        /// detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
        /// 
        /// The image_geometry package provides a user-friendly interface to
        /// common operations using this meta information. If you want to, e.g.,
        /// project a 3d point into image coordinates, we strongly recommend
        /// using image_geometry.
        /// 
        /// If the camera is uncalibrated, the matrices D, K, R, P should be left
        /// zeroed out. In particular, clients may assume that K[0] == 0.0
        /// indicates an uncalibrated camera.
        /// </summary>
        /// <remarks>
        /// Blittable native sequence structure for <c>sensor_msgs/msg/CameraInfo</c>.
        /// </remarks>
        [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct PrivSequence : global::System.IEquatable<PrivSequence>, global::System.IDisposable
        {
            private Priv* __data;
            
            private nuint __size;
            
            private nuint __capacity;
            
            public int Size => (int)__size;
            
            public int Capcacity => (int)__capacity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence()
                : this(0)
            {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence(int size)
            {
                ThrowIfNonSuccess(TryInitialize(size, out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence(PrivSequence src)
                : this(in src)
            {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence(in PrivSequence src)
                : this()
            {
                CopyFrom(in src); 
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence(PrivSequence* src)
                : this()
            {
                CopyFrom(src); 
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public PrivSequence(System.ReadOnlySpan<Priv> src)
                : this(src.Length)
            {
                src.CopyTo(AsSpan());
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void Dispose()
            {
                Finalize(ref this);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public System.Span<Priv> AsSpan()
            {
                return new(__data, Size);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(System.ReadOnlySpan<Priv> src)
            {
                Finalize(ref this);
                ThrowIfNonSuccess(TryInitialize(src.Length, out this));
                src.CopyTo(AsSpan());
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(PrivSequence src)
            {
                ThrowIfNonSuccess(TryCopy(in src, out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(in PrivSequence src)
            {
                ThrowIfNonSuccess(TryCopy(in src, out this));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public void CopyFrom(PrivSequence* src)
            {
                fixed (PrivSequence* pThis = &this)
                {
                    ThrowIfNonSuccess(TryCopy(src, pThis));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool TryCopy(in PrivSequence input, out PrivSequence output)
            {
                fixed (PrivSequence* pInput = &input, pOutput = &output)
                {
                    return TryCopy(pInput, pOutput);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public bool Equals(PrivSequence other)
            {
                return PrivSequence.AreEqual(in other, in this);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public override bool Equals(object? obj) => obj is PrivSequence s ? this.Equals(s) : false;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public override int GetHashCode()
            {
                return global::System.HashCode.Combine((nint)__data, __size, __capacity);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool operator ==(PrivSequence lhs, PrivSequence rhs)
            {
                return lhs.Equals(rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool operator !=(PrivSequence lhs, PrivSequence rhs)
            {
                return !(lhs == rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static PrivSequence* Create()
            {
                return _PInvoke();
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__create")]
                static extern PrivSequence* _PInvoke();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void Destroy(PrivSequence* msg)
            {
                _PInvoke(msg);
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__destroy")]
                static extern void _PInvoke(PrivSequence* msg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static bool TryInitialize(int size, out PrivSequence msg)
            {
                fixed (PrivSequence* pMsg = &msg)
                {
                    return _PInvoke(pMsg, (uint)size);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__init")]
                static extern bool _PInvoke(PrivSequence* msg, nuint size);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void Finalize(ref PrivSequence msg)
            {
                fixed (PrivSequence* pMsg = &msg)
                {
                    _PInvoke(pMsg);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__fini")]
                static extern void _PInvoke(PrivSequence* msg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool AreEqual(in PrivSequence lhs, in PrivSequence rhs)
            {
                fixed (PrivSequence* plhs = &lhs, prhs = &rhs)
                {
                    return _PInvoke(plhs, prhs);
                }
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__are_qual")]
                static extern bool _PInvoke(PrivSequence* lhs, PrivSequence* rhs);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            private static bool TryCopy(PrivSequence* input, PrivSequence* output)
            {
                return _PInvoke(input, output);
                
                [global::System.Runtime.InteropServices.SuppressGCTransitionAttribute]
                [global::System.Runtime.InteropServices.DllImportAttribute("sensor_msgs__rosidl_generator_c", EntryPoint = "sensor_msgs__msg__CameraInfo__Sequence__copy")]
                static extern bool _PInvoke(PrivSequence* input, PrivSequence* output);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ros2cs", "1.3.2+da40d8cd913b1d7f1523f4fd2ce6a86ea7d47c2e")]
            public static void ThrowIfNonSuccess(bool ret, [global::System.Runtime.CompilerServices.CallerMemberNameAttribute]
            string caller = "")
            {
                if (!ret)
                {
                    throw new global::Rosidl.Runtime.RosidlException($"An error occurred when calling 'global::Rosidl.Messages.Sensor.CameraInfo.PrivSequence.{caller}'.");
                }
            }
        }
    }
}
